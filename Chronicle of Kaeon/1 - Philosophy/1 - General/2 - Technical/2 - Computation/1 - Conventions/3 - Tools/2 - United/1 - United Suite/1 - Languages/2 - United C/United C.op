United C

	Philosophy

		-
			United C is a convention for C and C++ that allows them to work together as a hybrid
			language.
		-

	Principles

		Common C

			-
				Common C is a common convention for C and C++.
				
				The source code of a common C program must be written in either C or C++, and said
				code must conform to the conventions of the latest standard of the respective
				language.

				Under the common C convention, C code may not use any language features of C that
				C++ does not possess.
			-

		United C

			Common C

				-
					United C follows the common C convention.
				-
			
			Main Function

				-
					Any operations placed outside a function will be placed into the main function
					upon the compilation of an executable. If a main function is not already
					declared, one will be inferred.

					The main function, whether manually created or automatically generated, shall
					be formatted to have a return type of int, shall return zero, and shall have a
					parameter argc of type int and a parameter argv of type char pointer array.

					If there is both a manually defined main function present as well as operation
					code placed outside the main function, the code within the manually defined
					main function shall execute before the code outside of it.
				-

			Declaration Order

				-
					Functions and global variables in United C may be declared in any order.
				-
			
			Type Detection

				-
					The token "var" may be in lieu of the data type of a variable, in which case
					the type of said variable shall be predicted based on the value assigned to it.
				-

			Booleans

				-
					C code conforming to United C may use the literals true and false, which the
					preprocessor shall convert to 1 and 0 respectively, and may also use the data
					types bool and boolean, which the preprocessor shall convert to int.
				-

			Multiline Literals

				-
					United C allows multiline literals starting and ending with `.
					
					The ` character may be escaped using a backslash.
				-

			Addresses

				-
					United C allows @ to be used as the address token in addition to &.
				-

			Semicolons

				-
					United C code may omit semicolons where they are otherwise required.
				-

			Use

				-
					In place of the #include preprocessor, a sequence beginning with the token
					"use", referred to as a use directive, may be used in its place, where an
					indefinite number of paths to resources follow the use token, separated by
					commas.

					A use directive may terminate with either a new line or a semicolon.

					Paths to global resources may be written as they are, but paths to local
					resources must be encased in double quotes.

					If a path has no file extension, the system will check for any matching file
					with the extension "uc", "c", "h", or "cpp". If the extension cannot be
					verified, an extension of "uc" shall be inferred.

					Universal Preprocessor directives within imported code shall be executed on
					both the imported code and the code into which it was imported. The user can
					disable this for an imported file by encasing the name of said file in square
					brackets.
				-

			Online Dependencies

				-
					Include and use directives may reference dependencies stored online by their
					URLs, in which case the references must be encased in double quotes, as
					references to local resources would be.
				-

			Preprocessing

				-
					The main file and all local dependency files shall be preprocessed using the
					universal preprocessor upon compilation.
				-

		Usage

			Activation

				-
					A command or function used to generate United C should be named "United C" or
					"UC", adhering to the naming conventions of the language of its implementation,
					should take a string containing United C source code as an argument, and should
					return a string containing C or C++ code analogous to the input code. Such a
					command or function shall be called the United C transpilation function.

					The United C transpilation function may be called by a Universal Preprocessor
					directive, which should return the output of said command or function.
				-

			Compiler

				-
					United C shall have a custom compiler which shall, as an executable take a path
					to a single United C file as its first argument, run the universal preprocessor
					on it, and then compile the resulting code as C if said code uses no C++
					exclusive utilities, and as C++ otherwise.

					Optionally, the file path may be followed by either the argument "auto", or the
					argument "cpp". If said argument is auto, nothing will happen, but if the
					argument is cpp, the code will be compiled to C++ even if it could otherwise be
					compiled to C.

					If desired, the user may pass in an indefinite number of other arguments after
					the second argument, constituting the miscellaneous arguments list.

					By default, the United C compiler shall pass a string to Universal Preprocessor
					directives through the list passed to said directives. Said string shall be the
					first element within said list, followed by the contents of the miscellaneous
					arguments list, and shall contain "C" if the compiler detects the language to
					be C, and "C++" if the compiler detects the language to be C++.
				-

			Compilation

				-
					To compile an executable, the United C compiler shall only require the main
					file of said application.

					To compile a utility, the United C compiler shall require a flag indicating
					that it is compiling a utility as opposed to an executable as well as each file
					of the utility that is not included by any other file in said utility.
			
					If code written in United C uses any features that are in C++ but not in C, it
					shall be compiled as C++, and otherwise compiled as C.
				-

			Conventions

				-
					United C may be referred to as "UC".

					United C files should use the file extension ".uc".

					The United C Compiler may be abbreviated as "UCC".
				-