Kaeon FUSION Standard Interface
	
	Philosophy
		
		-
			The Kaeon FUSION standard interface provides commands that allow users to write Turing
			complete scripts in Kaeon FUSION.
		-
	
	Principles
		
		Alias
			
			-
				The Kaeon FUSION standard interface may be referenced using the alias "Standard".
			-
		
		Effects

			Properties
			
				Use
				
					-
						When the standard interface is in effect, Kaeon FUSION's use command will
						have priority over all other commands, and will integrate interfaces
						according to the string forms of the values returned by its children
						instead of the content of said children.
					-
				
				State
					
					-
						The Kaeon FUSION Standard Interface establishes a state that stores data
						between commands.
						
						Every item stored in the state will have a string alias to identify it. The
						data stored within the item may be of any data type. Certain items may be
						declared as global.
						
						After a command is processed, items in the state generated by its children
						that are not global are deleted. If FUSION jumps, items in the state not
						generated by the parent, grandparents, and the preceding siblings of the
						parents and grandparents of the element it landed on that are not global
						will be deleted.

						At any time the state may be serialized to a dynamic list.
					-
				
				Exceptions
					
					-
						If an exception is thrown by a command while the standard interface is
						active, all subsequent commands will fail to activate until the exception
						is caught.
					-
			
			Host Environment
				
				Arguments
				
					-
						The host environment of a script using the standard interface may pass an
						indefinite number of arguments to the script.
					-
				
				Console
					
					-
						The host environment of a script using the standard interface may provide
						an alternate console for the script to output to. By default, the console
						is standard out.
					-
				
				Build Workspace
					
					-
						In addition to the workspaces present by default in Kaeon FUSION, the
						standard interface also allows the host environment to specify a single
						build workspace, which in addition to becoming part of the workspace, will
						also serve as the default directory for file output.
						
						By default, the build workspace is the local directory.
					-

				DOM

					-
						The host environment for the Kaeon FUSION standard interface may provide an
						HTML DOM with which a Kaeon FUSION script may interface.

						If elements are injected into the DOM in HTTP JSON format or any analogue
						to it, any objects in function JSON format or any analogue to it shall be
						converted into functions.
					-
		
		Conventions

			FUSION Process

				-
					Unless otherwise specified, the effects specified for any command provided by
					the standard interface shall activate at step three of the FUSION process.
				-
		
			Implicit Casting
				
				-
					Values stored within the state have types, but, if possible, will be implicitly
					cast when passed as arguments to a command requiring parameters of a different
					type.
				-
			
			Case Sensitivity
				
				-
					All of the commands provided by the standard interface, with the exception of
					literals, do not take letter case into account.
				-
			
			Lists
				
				Strings in List Operations
					
					-
						Strings will be interpreted as lists where each character is an element
						when used as arguments in list operations.
					-

				List Indexes
					
					-
						Commands in the standard interface that pertain to lists use indexes that
						start at one. If a command attempts to access or modify an index of a list
						that does not exist, the list will be resized to accommodate the index.
					-
				
				Dynamic Lists

					-
						Lists used by the standard interface will be dynamic lists, which shall
						also serve as de facto objects.
					-
		
			Formats

				State Serialization Format

					-
						When the state is serialized as a list, said list is encoded in the state
						serialization format.

						Each item in the state is encoded as a list called an item list which has
						two elements, the first being the alias and the second being the value.

						Each scope in the state will be stored as a scope list, which shall contain
						an indefinite amount of item lists.

						The state itself shall be encoded as a list called the state list, with
						each scope of said state being represented as a scope list, where the first
						scope list shall represent the global scope, and each subsequent list shall
						represent a local scope, arranged according to their order on the current
						scope stack.
					-