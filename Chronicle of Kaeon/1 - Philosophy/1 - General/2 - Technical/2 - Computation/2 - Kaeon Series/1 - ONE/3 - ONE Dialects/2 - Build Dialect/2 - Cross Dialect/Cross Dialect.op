Cross Dialect
	
	Philosophy
		
		-
			A cross dialect is a build dialect that allows code written in the Kaeon FUSION
			standard interface to be translated to another language.
			
			Given that there are certain details some languages may require that would not be
			included in native Standard interface code, meta commands may be used to specify the
			necessary information. As such, a set of meta command formats used for all cross
			dialects has been specified.
			
			Additional meta command notation formats may be added to individual cross dialects to
			cover for features specific to certain languages.
		-
	
	Principles
		
		Structure
			
			Strong Typing
				
				-
					A meta command may have a child with the content "Type". The children of the
					type element will determine the type of any variable declared within the meta
					command's scope.
				-
				
				Casting
					
					-
						A meta command may have a child with the content "Cast". The children of
						the cast element will determine the type that the value returned by the
						command in the meta command's scope will be cast to. This effect will have
						reduced scope.
					-
			
			Arrays
			
				-
					A meta command may have a child with the content "Arrays".
				-
			
				Size
				
					-
						If a meta element has a child with the content "Arrays", said child may
						have a child with the content "Size". The size element may either have a
						child with the content "Fixed", in which case all lists within the meta
						command's scope will be treated as fixed length arrays, or it may have a
						child with the content "Variable", in which case all lists within the meta
						command's scope will be treated as variable length vectors.
						
						By default arrays are assumed to be of variable length.
					-
				
				Index
				
					-
						If a meta element has a child with the content "Arrays", said child may
						have a child with the content "Index". The index element will have a child
						containing an integer number as its content, dictating the starting index
						of all lists in the meta command's scope.
						
						By default arrays are assumed to start at an index of one.
					-
			
			Functions
				
				Function Definitions
					
					-
						A meta command may have a child with the content "Function". If the meta
						command immediately precedes a Define command, the function element's
						children will determine the properties of all of the functions defined by
						said Define command.
					-
				
					Type
					
						-
							If a meta element has a child with the content "Function", said child
							may use one of the following three ways to declare the type of
							functions declared within the meta command's scope.
							
							The function element may have a child with the content "Type". The
							children of the type element determine the return type of the function.
							
							The function element may have a child with the content "Class". In this
							case, the function definition will serve as the constructor for a class
							definition. Functions defined within the function definitions will
							become methods of the class, and global variables defined within the
							function definitions will become class variables. The class element may
							have an indefinite number of children, each with content specifying the
							names of classes to extend from.
							
							The function element may have a child with the content "Constructor".
							In this case, the function definition will serve as a constructor for
							the class definition it occurs within.
						-
				
					Parameters
					
						-
							If a meta element has a child with the content "Function", said child
							may have use one of the following two ways to declare the parameters of
							functions declared within the meta command's scope.
							
							The function element may have a child with the content "Parameters".
							Each child of the parameters element defines a parameter. The content
							of said child defines the parameter's alias, and its children define
							its type.
							
							Alternatively, The function element may have a child with the content
							"Parameter Number". The parameter number element must have a single
							child with content containing an integer number specifying the number
							of parameters the functions will have.
						-
					
					Inline Functions
					
						-
							The function element may have a child with the content "Inline". In
							this case, the function definition will appear in the cross compiled
							code where it was defined in the original cross dialect code. The
							inline element may have a child with the content "Unaliased", in which
							case the cross compiled function will not have an alias. The cross
							dialect function that corresponds to an unaliased cross compiled
							function must still have an alias, but there will be no issues if it
							shares an alias with other functions.
						-
				
				Host Functions
					
					-
						A meta command may have a child with the content "Host". Any command within
						the meta command's scope with content that matches the content of one of
						the host element's children will be treated as a function call to a
						function with an alias matching its content. This effect will have extended
						scope.
					-
			
			Fields
			
				-
					A meta command may have a child with the content "Field". The field element
					must either have a child with the content "Function", in which case In commands
					within the meta command's scope will only access public functions, or a child
					with the content "Variable", in which case the In commands within the meta
					command's scope will only access public variables.
					
					By default In commands are assumed to only access functions.
				-
		
		Extensions
		
			-
				An extended variant of the cross dialect must specify what languages and frameworks
				the dialect corresponds to, what data types may be used for variables and
				functions, and what may be placed in a notation.
			-