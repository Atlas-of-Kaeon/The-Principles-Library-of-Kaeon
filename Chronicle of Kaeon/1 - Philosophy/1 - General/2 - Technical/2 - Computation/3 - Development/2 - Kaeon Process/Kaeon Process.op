The Kaeon Process

	Philosophy
	
		-
			The Kaeon process is a project development methodology.
		-
	
	Principles

		The Three Branches

			-
				A project developed under the Kaeon process has three branches, these being the
				specification, the documentation, and the implementations.

				The specification is a set of written texts that define and specify the nature and
				aspects of the product or service that the developers intend to produce.

				The documentation are the documents that outline all aspects of the project that
				lie outside the scope of the specification, including development priorities,
				resource allocation, timelines, changelogs, records, developer wikis, user guides,
				and code comments, among other things.

				An implementation, of which there may be many, is a partially or completely
				developed product or service engineered according to the terms of the
				specification.
			-
		
		Specification Topics

			Project Pivots

				-
					The specification may be modified at any time and for any reason, after which
					the documentation and the implementations must be changed in order to conform
					to it.

					Thus, any major update to the plan of the project should begin with a
					modification to the specification.

					Such an update can be called a project pivot.
				-

			Minimalism

				-
					The specification should strive to be as minimalistic as possible in the
					language it uses to outline its terms, without sacrificing any relevant detail.
				-

			Term Hierarchy

				-
					The terms of the specification should be arranged into a hierarchy, ordered
					with the most fundamental elements of the project closer to the top and the
					least fundamental elements of the project closer to the bottom.

					There should be a single term at the top of the hierarchy that defines the
					overall idea of the project called the master term.
				-

			Static and Dynamic Terms

				-
					The terms of the specification may be categorized as either static, which all
					implementations must abide by, or dynamic, which grants the developers some
					degree of liberty to decide if, and if so, how to implement certain aspects of
					the product or service.
				-

			Crystallization and Fragmentation

				-
					Combining the specifications of multiple projects into a single specification
					is referred to as project crystallization, and the separation of a single
					specification into multiple specifications for separate projects is referred to
					as project fragmentation.

					Crystallization is useful when multiple separate projects have similar or
					overlapping scopes, and fragmentation is used when a component of a project may
					have uses outside of said project, though the new projects generated by
					fragmentation may remain as dependencies of the original.
				-

			Specification Library

				-
					A specification library is an organized collection of related specifications.
				-

		Development Topics

			Validity

				-
					The degree to which a given implementation conforms to the terms of the
					specification is referred to as its validity.
					
					Though it may to some degree be subjective, it may be quantified in terms of
					percentage.
				-

			Release Points

				-
					The developers of a project may define milestone release points in the
					documentation where an implementation may be fit for an initial release or
					version update once a certain set of features have been developed.
					
					Between milestone release points and following project completion, patches may
					also be released.
				-