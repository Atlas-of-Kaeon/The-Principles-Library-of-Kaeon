Standard Interface Module Conventions

	Philosophy

		-
			This document lists interface module conventions and interface ACE conventions.
		-

	Principles

		Standards

			Definitions

				Interface Components

					-
						An interface component is a module which takes one argument, which may
						either be an array of strings or an object for which each field contains a
						string, and which may perform any miscellaneous action in accordance with
						the content of said argument.

						An array of strings corresponds to the command line arguments passed to a
						modular service, and an object in the aforementioned schema corresponds to the
						URL arguments passed to a shadow host.
					-

				Companion Suite

					-
						A Philosopher's Suite specifically designed or used to expand another
						Philosopher's Suite is called a companion suite, and an interface module
						containing such a suite is called a companion interface.
					-

			Identification

				Environments

					-
						The language or environment of a utility within an interface module may be
						specified using the Universal Preprocessor's language aliases.
					-

				Rules

					-
						An interface rule is a codified rule for identifying interface entities
						among an interface module which match certain criteria.
					-

				Utilities

					-
						A utility identified in an interface module may be identified by a ONE+
						string, called a utility ID string, containing a ONE list specifying a tag
						trace ID for said utility.
					-

			Module Formats

				Document

					-
						A document which specifies an interface module is referred to as an
						interface module document.
					-

				Folder

					-
						A folder, referred to as an interface module folder, containing a
						hierarchical series of sub-folders, may be interpreted as an interface
						module where each file within it constitutes a utility, with the path
						segments of a given file's path relative to the root folder constitutes its
						tag trace ID, and where its file type and its comment document determine
						its properties.
					-

		Conventions

			Interface Module Conventions

				Type

					-
						A utility may have the type property, which may have the values library,
						component, plugin, or application, among others, with library indicating
						that the utility is a library to be imported into a program, with component
						indicating that the utility is a modular service plugin, with plugin
						indicating that the utility is a plugin for another type of system, and
						with application indicating that the utility is an application in and of
						itself.
					-

				Environment

					-
						A utility may have the environment property, indicating which language or
						environment said utility is designed for.

						If an environment is not specified, it may be inferred dynamically.

						For a plugin utility, the environment shall define the application for
						which it is a plugin, specified using an alias for said application,
						referred to as an application alias, or the module ID string of an
						application defined elsewhere in the interface as a utility. If an
						application is executed by a Philosopher's Singularity and said application
						has plugins defined for it in said singularity's interface, said plugins
						shall be integrated into said application automatically.
					-

			Interface ACE Conventions

				Type

					-
						To represent the type property, an interface entity may have a type
						component, which is a Kaeon ACE component with the content "Type", which
						itself shall have a child with the content "Library", "Component", or
						"Plugin", specifying the respective type of the utility said component is
						attached to.
					-

				Environment

					-
						To represent the environment property, an interface entity may have an
						environment component, which is a Kaeon ACE component with the content
						"Environment", which itself shall have a child, the content of which shall
						specify the environment which pertains to the utility said component is
						attached to.

						Environment, generally speaking, shall not be sensitive to letter case or
						to non-alphanumeric characters.
					-