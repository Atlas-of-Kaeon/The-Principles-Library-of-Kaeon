Standard Interface Module Conventions

	Philosophy

		-
			This document lists interface module conventions and interface ACE conventions.
		-

	Principles

		Standards

			Interface Components

				-
					An interface component is a module which takes one argument, which may either
					be an array of strings or an object for which each field contains a string, and
					which may perform any miscellaneous action in accordance with the content of
					said argument.

					An array of strings corresponds to the command line arguments passed to a
					modular service, and an object in the aforementioned schema corresponds to the
					URL arguments passed to a shadow host.
				-

			Identification

				Environments

					-
						The language or environment of a utility within an interface module may be
						specified using the Universal Preprocessor's language aliases.
					-

				Utilities

					-
						A utility identified in an interface module may be identified by a ONE+
						string, called a utility ID string, containing a ONE list specifying a tag
						trace ID for said utility.
					-

			Module Formats

				Document

					-
						A document which specifies an interface module is referred to as an
						interface module document.
					-

				Folder

					-
						A folder, referred to as an interface module folder, containing a
						hierarchical series of sub-folders, may be interpreted as an interface
						module where each file within it constitutes a utility, with the path
						segments of a given file's path relative to the root folder constitutes its
						tag trace ID, and where its file type and its comment document determine
						its properties.
					-

		Conventions

			Interface Module Conventions

				Type

					-
						A utility may have the type property, which may have the values library,
						component, or plugin, among others, with library indicating that the
						utility is a library to be imported into a program, with component
						indicating that the utility is a modular service plugin, and with plugin
						indicating that the utility is a plugin for another type of system.
					-

				Environment

					-
						A utility may have the environment property, indicating which language or
						environment said utility is designed for.

						If an environment is not specified, it may be inferred dynamically.
					-

			Interface ACE Conventions

				Type

					-
						To represent the type property, an interface entity may have a type
						component, which is a Kaeon ACE component with the content "Type", which
						itself shall have a child with the content "Library", "Component", or
						"Plugin", specifying the respective type of the utility said component is
						attached to.
					-

				Environment

					-
						To represent the environment property, an interface entity may have an
						environment component, which is a Kaeon ACE component with the content
						"Environment", which itself shall have a child, the content of which shall
						specify the environment which pertains to the utility said component is
						attached to.
					-