Interface JSON

	Philosophy

		-
			An interface JSON object is a JSON object which specifies the content of an interface
			module.
		-

	Principles

		Structure

			-
				An interface JSON object may have one of both of the fields "references", and
				"utilities".

				The references field, if present, shall contain a list of location specifiers, each
				pointing to an external file specifying an interface module, the contents of which
				are to be integrated into the module specified by the object to which said field
				belongs.

				The utilities field, if present, contains a list of utility objects.

				A utility object shall represent a utility in the module, shall have the fields
				"path" and "content", and may also optionally have the field "tags".

				The path field shall contain a list of strings specifying the content and order of
				the tags in a tag trace ID of the utility.

				The content field shall contain one or both of the fields "locations" and "source",
				with the locations field, if present, containing a location specifier for the
				source of the utility, and with the source field containing the source of the
				utility as a string, with the locations field taking precedence if both fields are
				present unless the source to which it points cannot be located.

				The tags field, if present, shall contain a tags object specifying miscellaneous
				information about the utility.
			-

		Conventions

			Interface ACE

				-
					Interface JSON files referenced by Kaeon ACE documents may have their contents
					interpreted as interface ACE documents.

					JSON tag protocols applied to said object may, and ought, to borrow from
					interface ACE conventions. As such, any relevant Kaeon ACE component which
					either has no children or has one child may be converted to a JSON object
					field according to the ONE to JSON conversion conventions, and used in the tags
					object.
				-