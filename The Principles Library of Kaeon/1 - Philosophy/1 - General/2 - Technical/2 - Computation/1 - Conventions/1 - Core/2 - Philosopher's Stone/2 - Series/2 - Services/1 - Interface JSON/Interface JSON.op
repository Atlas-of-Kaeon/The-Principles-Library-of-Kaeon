Interface JSON

	Philosophy

		-
			Interface JSON is a JSON object schema used to specify the functionality and
			dependencies of interface modules.

			An interface module defined by an interface JSON object is called a JSON interface.

			A JSON file containing a single interface JSON object is called an interface JSON file.
		-

	Principles

		Conventions

			Interface Components

				-
					An interface component is a module which takes one argument, which may either
					be an array of strings or a JSON object for which each field contains a string,
					and which may perform any miscellaneous action in accordance with the content
					of said argument.

					An array of strings corresponds to the command line arguments passed to a
					modular service, and an object in the aforementioned schema corresponds to the
					URL arguments passed to a shadow host.
				-

			Interface JSON Amalgamation

				-
					Interface JSON amalgamation is the process of combining the contents of
					multiple interface JSON objects into one, the result being a combination
					interface JSON object.

					Interface JSON separation is the process of removing the contents of an
					interface JSON object from a given combination JSON object.
				-

		Format

			Components

				-
					An interface JSON object may have a field with the alias "components", which
					contains an array of JSON objects, each representing an interface component.
					
					Each of said objects shall have a field with the alias "reference", containing
					a string specifying the path or module alias of the interface component to
					which it corresponds.

					Each of said objects may also have a field with the alias "environment",
					containing a string specifying the language or environment that said interface
					component is intended to be executed within.

					If the environment is not specified, the program will attempt to deduce it
					dynamically.
				-

			Modules

				-
					An interface JSON object may have a field with the alias "modules", which
					contains an array of JSON objects, each representing a dependency for a given
					language.

					Each of said objects shall have a field called "path", and an array of strings,
					called the package path, where the first string represents the root package of
					the dependency to which the object corresponds, the last string represents the
					alias of said dependency, and each intermediate string represents a sub-package
					of the package represented by the preceding string.

					Each of said objects shall also have a field with the alias "implementations",
					containing an array of JSON objects, each representing a different
					implementation of said dependency, where each of said objects has a field with
					the alias "reference", containing a string specifying the path or module alias
					of said implementation, and may optionally have a field with the alias
					"environment", containing a string specifying the language or environment that
					said dependency is intended for.

					If the environment is not specified, the program will attempt to deduce it
					dynamically.
				-

			Extensions

				-
					An interface JSON object may have a field with the alias "extensions", which
					contains a JSON object, where each field represents a set of extensions for a
					specific type of application.

					Each of said fields shall have an alias specifying the name of the type of
					application which the extensions it specifies are designed for, and shall
					contain an array of strings, each specifying the path or module alias of a
					dependency to integrate into said application.
				-

			Management

				-
					An interface JSON object may have a field with the alias "management", which
					contains a JSON object which shall have a single field with an alias matching
					the name of the interface, and which contains an object that may have either or
					both of the fields with the aliases "install" and "uninstall", each of which
					contain an array which follows the same schema as the array contained by the
					components field.
					
					The modules specified in the install field specify scripts to be executed upon
					the installation of the contents of the interface JSON object, and the modules
					specified in the uninstall field specify scripts to be executed upon the
					uninstallation of the contents of the interface JSON object.

					However, unlike with the interface components defined in the components field,
					no arguments shall be passed to the components defined in the management field.
				-