Super Mode
	
	Philosophy
		
		-
			Super Mode is an alternate syntax for Kaeon FUSION code that serves to allow for infix
			notation and to reduce verbosity.
		-
	
	Principles
		
		Effects
			
			Interfaces
				
				-
					Super Mode will automatically enable the Standard interface and the Stack
					interface.
				-
			
			Super Tokens
				
				-
					Super tokens are tokens that may be placed within the content of elements.
					
					If a token is not surrounded by double quotes, it will be processed. Certain
					tokens will take priority in the order they are processed if they occur within
					the same element. If multiple tokens have equivalent priority, they will be
					processed from left to right. If a token requires a value it cannot locate, it
					will not be processed. The letter case of a token is irrelevant.
					
					Upon being processed, a token will separate the content that precedes it into a
					left hand value and the content that follows it into a right hand value. Both
					the left hand value and the right hand value will be trimmed of any leading or
					trailing whitespace. If the resulting left hand value has a length of zero, the
					element preceding the element containing the token may serve as the left hand
					value for certain tokens. If the resulting right hand value has a length of
					zero, the element following the element containing the token, or the children
					of the element containing the token, in which case there will be multiple right
					hand values, may serve as the right hand value depending on the token.
					
					Once processed into a left hand value, a token, and a right hand value, an
					effect will be applied depending on the token.
				-
				
				Token Conflicts
				
					-
						If the content of an element matches the name of a command in the standard
						interface or stack interface, or if an element is a directive, any tokens
						within said element will not be processed.
						
						If one token consists of another token followed by an additional sequence
						of characters, the larger token will take priority.
						
						Certain tokens referred to as isolated tokens will only be recognized if
						they are preceded by either the beginning of their element's content or by
						whitespace, and followed either by the end of their element's content or by
						whitespace.
					-
				
				Tokens
				
					First Priority
					
						Abs
						Cos
						Def
						Define
						Elif
						Else
						For
						For Each
						For Range
						Global
						If
						Import
						Log
						Log Line
						LogN
						New
						Params
						Print
						Return
						Sin
						Sqrt
						Tan
						While
						
					Second Priority
					
						=
						&=
						+=
						-=
						*=
						/=
						%=
						
					Third Priority
					
						And
						Not
						Or
						Xor
						
					Fourth Priority
					
						==
						!=
						>
						>=
						<
						<=
						
					Fifth Priority
					
						->
						=>
						|
						@
						++
						--
					
					Sixth Priority
					
						&
						+
						-
					
					Seventh Priority
					
						**
						*
						/
						%
				
				Effects
					
					Function Parameters
					
						-
							The token "params" may be used to specify function parameters if it is
							nested within the child of a define command. It is an isolated token.
							
							This token will use the children of the command it occurs in as
							alternative right hand values.
							
							The content of each of the token's right hand values shall become an
							alias of a parameter for the function corresponding to the order of
							said right hand values.
						-
					
					Implicit Prefix Notation
					
						-
							Certain tokens may be used in place of certain commands where their
							right hand values will serve as arguments. They are all isolated
							tokens.
							
							These tokens will use the children of the command they occur in as
							alternative right hand values.
							
							The log, log line, import, define, else, not, new, global, and return
							commands may all be used in the form of such a token as opposed to a
							command. The token "print" may be used in place of "log line", the
							token "def" may be used in place of "define", the token "Sin" may be
							used in place of "Sine", the token "Cos" may be used in place of
							"Cosine", the token "Tan" may be used in place of "Tangent", the token
							"Abs" may be used in place of "Absolute Value", the token "Sqrt" may be
							used in place of "Square Root", and the token "LogN" may be used in
							place of "Natural Logarithm".
						-
					
					Conditionals and Loops
						
						-
							The following tokens will use the children of the command they occur in
							as alternative right hand values. They are all isolated tokens.
							
							The token "If" with a right hand value in the form of a value that
							returns a boolean translates to a conditional where its children, not
							including said boolean, are processed if said boolean is true.
							
							The token "Elif" with a right hand value in the form of a value that
							returns a boolean translates to a conditional where its children, not
							including said boolean, are processed if said boolean is true and the
							previous conditional failed to activate.
							
							The token "While" with a right hand value in the form of a value that
							returns a boolean followed by the token "Do" translates to a loop where
							its children, not including said boolean, are processed until said
							boolean is false.
							
							The token "For" with at least one right hand value in the form of a
							value that returns a number translates to a loop where its children,
							not including the first right hand value, are processed for the number
							of times returned by said number.
							
							The token "For Each" with at the least two right hand values, the first
							of which may have any content and the second of which returns a list
							translates to a loop where its children, not including the first two
							right hand values, are processed once for every element in the returned
							list and content of the first right hand value serves as the alias for
							the element in the list at the index corresponding to the current
							iteration.
							
							The token "For Range" with at the least three right hand values, the
							first of which may have any content and the second and third of which
							return numbers, translates to a loop where its children, not including
							the first three right hand values, are processed once for every number
							between the two returned numbers, inclusive, and the miscellaneous
							string serves as the alias for the number corresponding to the current
							iteration.
						-
					
					Infix Operators
						
						-
							An infix operator token will take its left hand value and its right
							hand values, and make them the children of the command containing it,
							with the left hand value preceding the right hand values. The token
							will then be replaced with a standard interface command.
							
							These tokens will use the siblings of the command they occur in as
							alternative left hand values and right hand values.
							
							The tokens recognized as infix operators are listed below along with
							their respective standard interface commands:
							
							&: Concatenate
							@: At
							And: And
							Or: Or
							Xor: Exclusive Or
							>: Greater
							>=: Greater or Equal
							<: Less
							<=: Less or Equal
							==: Equal
							!=: Not: Equal
							**: Power
							*: Multiply
							/: Divide
							%: Modulus
							+: Add
							-: Subtract
							
							The token "-=" indicates the presence of a command that deprecates its
							left hand value by its right hand value.
							
							The token "+=" indicates the presence of a command that increments its
							left hand value by its right hand value.
							
							The token "*=" indicates the presence of a command that multiplies its
							left hand value by its right hand value.
							
							The token "/=" indicates the presence of a command that divides its
							left hand value by its right hand value.
							
							The token "%=" indicates the presence of a command that calculates the
							remainder of its left hand value divided by its right hand value.
							
							The token "&=" indicates the presence of a command that concatenates
							its right hand value to its left hand value.
						-
					
					Postfix Operators
						
						-
							The token "--" indicates the presence of a command that deprecates its
							left hand value by one.
							
							The token "++" indicates the presence of a command that increments its
							left hand value by one.
						-
					
					Special Operators
					
						-
							The token "=" translates to a command that assigns the right hand value
							to a variable with an alias matching its left hand value.
							
							The token "->" translates to a command that performs the functions
							specified by its right hand values within the object specified by its
							left hand value. It will use the children of the element it occurs in
							as alternative right hand values.
							
							The token "=>" translates to a command that returns the variable
							specified by its right hand value from within the object specified by
							its left hand value.
							
							The token "|" translates to performing the commands specified by its
							left hand value with its right hand values as its first argument and
							the children of the command containing it as additional arguments. It
							will use the children of the element it occurs in as alternative right
							hand values.
						-

		Standard+

			-
				Standard+ is when super mode is active by default when interpreting Kaeon FUSION
				code.
			-